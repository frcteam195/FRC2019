buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'gov.nist.math:jama:1.0.3'
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.5'
        classpath 'org.apache.commons:commons-math3:3.6.1'
    }
}

plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2019.4.1"
    id 'idea'
    id 'war'
}

apply plugin: 'com.bmuschko.tomcat'

def TEAM = 195
def TEAMIP = "10.1.95.2"
def ROBOT_MAIN_CLASS = "com.team195.frc2019.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = TEAM
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
			// Debug can be overridden by command line (./gradlew deploy -PdebugMode), for use with VSCode
			debug = frc.getDebugOrDefault(false)
		
			project.logger.lifecycle('Checking if profile mode...')
			//Enter profile mode with ./gradlew deploy -PprofileMode
			if (frc.project.hasProperty("profileMode")) {
				project.logger.lifecycle('Debug mode enabled!')
				project.logger.lifecycle("Connect JMX client to ${TEAMIP}:1099 for RoboRIO profiling with visualvm.")
				jvmArgs = [ "-Dcom.sun.management.jmxremote=true",
							"-Dcom.sun.management.jmxremote.port=1099",
							"-Dcom.sun.management.jmxremote.local.only=false",
							"-Dcom.sun.management.jmxremote.ssl=false",
							"-Dcom.sun.management.jmxremote.authenticate=false",
							"-Djava.rmi.server.hostname=${TEAMIP}",
							"-XX:+UseG1GC",
							"-XX:MaxGCPauseMillis=10"
							]
			} else {
 				jvmArgs = [ "-XX:+UseG1GC",
 							"-XX:MaxGCPauseMillis=10"
 							]
				//jvmArgs = [ "-XX:+UseConcMarkSweepGC",
				//			"-XX:MaxGCPauseMillis=10"
				//			]
			}
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    compile("gov.nist.math:jama:1.0.3")
    compile("org.apache.commons:commons-math3:3.6.1")
    def jUnitVersion = '5.5.0-M1'
    testCompile("org.junit.jupiter:junit-jupiter-api:${jUnitVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${jUnitVersion}")
    
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
    
    
    def tomcatVersion = '9.0.17'
    def tomcatLoggingVersion = '9.0.0.M6'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatLoggingVersion}",
    		"org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"

	compile("org.springframework:spring-webmvc:5.1.6.RELEASE")
    compile("javax.servlet:javax.servlet-api:4.0.1")
    compile("javax.servlet:jstl:1.2") 
}

// context where tomcat is deployed, by default localhost:8080/
tomcatRun.contextPath = '/'
tomcatRunWar.contextPath = '/'

tomcat {
    httpProtocol = 'org.apache.coyote.http11.Http11Nio2Protocol'
    ajpProtocol  = 'org.apache.coyote.ajp.AjpNio2Protocol'
}

war {
	//entryCompression = ZipEntryCompression.STORED
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    
    doLast {
        def folder = new File( "${rootDir}/build/classes/java/main/edu/wpi" )
		if (folder.exists()) {
			project.logger.lifecycle("Overriding WPILibJ Classes")
			
			if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
				def tmpFolder = new File ( "${rootDir}/build/libs/tmpDir" )
				if (tmpFolder.exists()) {
					exec {
						executable "rm"
						args "-Rf","${tmpFolder.getAbsolutePath()}"
					}
				}
			
				tmpFolder.mkdirs()
			
				exec {
					executable "sh"
					args "-c","cd ${tmpFolder.getAbsolutePath()}; jar -xvf ${jar.archivePath}"
				}
			
				exec {
					executable "sh"
					args "-c","cp -fr ${rootDir}/build/classes/java/main/edu/wpi/* ${tmpFolder.getAbsolutePath()}/edu/wpi/"
				}
				
				exec {
					executable "rm"
					args "-Rf"," ${jar.archivePath}"
				}
				
				exec {
					executable "sh"
					args "-c","jar -cmvf ${tmpFolder.getAbsolutePath()}/META-INF/MANIFEST.MF ${jar.archivePath} -C ${tmpFolder.getAbsolutePath()} ."
				}
			}
		}
    }
}

test {
    useJUnitPlatform()
}

task listrepos {
    doLast {
        println "Repositories:"
        project.repositories.each { println "Name: " + it.name + "; url: " + it.url }
        println wpi.deps.wpilib()
   }
}

wrapper {
    gradleVersion = '5.4'
}
